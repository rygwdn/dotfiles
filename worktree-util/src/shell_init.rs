pub fn get_fish_init(exe_path: &str, function_name: &str) -> String {
    format!(
        r#"# Fish function for worktree navigation
# Generated by: {} --init=fish:{}

function {} --description "Navigate to worktree projects"
    set -l result ({} $argv)
    if test -n "$result"
        cd $result
    end
end

# Add tab completion
complete -c {} -f -a "({} --list)"

# Optional: Bind to Ctrl+G
# bind \cg {}"#,
        exe_path, function_name, function_name, exe_path, function_name, exe_path, function_name
    )
}

pub fn get_bash_init(exe_path: &str, function_name: &str) -> String {
    format!(
        r#"# Bash function for worktree navigation
# Generated by: {} --init=bash:{}

{} () {{
    local result
    result=$({} "$@")
    if [[ -n "$result" ]]; then
        cd "$result"
    fi
}}

# Add tab completion
_{}() {{
    local cur prev
    COMPREPLY=()
    cur="${{COMP_WORDS[COMP_CWORD]}}"
    prev="${{COMP_WORDS[COMP_CWORD-1]}}"
    
    # Get completions from worktree-nav
    COMPREPLY=( $(compgen -W "$({} --list)" -- "${{cur}}") )
    return 0
}}
complete -F _{} {}

# Optional: Bind to Ctrl+G (add to .bashrc)
# bind -x '"\C-g": {}'
"#,
        exe_path,
        function_name,
        function_name,
        exe_path,
        function_name,
        exe_path,
        function_name,
        function_name,
        function_name
    )
}

pub fn get_zsh_init(exe_path: &str, function_name: &str) -> String {
    format!(
        r#"# Zsh function for worktree navigation
# Generated by: {} --init=zsh:{}

{} () {{
    local result
    result=$({} "$@")
    if [[ -n "$result" ]]; then
        cd "$result"
    fi
}}

# Add tab completion
_{}() {{
    local -a completions
    completions=($({} --list))
    _describe 'worktree' completions
}}
compdef _{} {}

# Optional: Bind to Ctrl+G (add to .zshrc)
# bindkey -s '^G' '{}\n'
"#,
        exe_path,
        function_name,
        function_name,
        exe_path,
        function_name,
        exe_path,
        function_name,
        function_name,
        function_name
    )
}
