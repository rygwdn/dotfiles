# prefix = C-a unless we're over ssh
if-shell 'test -z "$SSH_CONNECTION"' \
    'set-option -g prefix C-a; bind-key C-a last-window; bind-key a send-prefix' \
    'set-option -g prefix C-b; bind-key C-b last-window; bind-key b send-prefix'

# vim
setw -g mode-keys vi

# Select pane when clicked (also passes through)
set-option -g mouse-select-pane on
set-option -g mouse-resize-pane on
set-option -g mouse-select-window on
setw -g mode-mouse on

# esc to copy
#unbind [
bind Escape copy-mode

# Lots of history
set -g history-limit 10000

unbind K
bind K confirm-before "kill-window"

setw -g automatic-rename

set-option -ga update-environment " DBUS_SESSION_BUS_ADDRESS XDG_SESSION_COOKIE SESSION_MANAGER GDMSESSION GNOME_KEYRING_CONTROL GNOME_KEYRING_PID GPGKEY UBUNTU_MENUPROXY XDG_CONFIG_DIRS XDG_CURRENT_DESKTOP XDG_DATA_DIRS XDG_SEAT_PATH XDG_SESSION_COOKIE XDG_SESSION_PATH DISPLAY"

# status bar
#set-option -g status-utf8 on
set-option -g status-justify centre
set-option -g status-bg default
set-option -g status-fg cyan
set-option -g status-interval 5
set-option -g status-left-length 20
# cool: can use #T to show current directory
set-option -g status-left '#[fg=green][ ###S ] ['
set-option -g status-right '#[fg=green]] [ #[fg=blue]%F #[fg=white]%I:%M%P #[fg=green]]#[default]'
set-window-option -g window-status-current-fg white
set-window-option -g window-status-format '#I:#W#F'
set-window-option -g window-status-current-format '#[fg=red](#[fg=white]#I:#W#F#[fg=red])#[default]'

# clock
set-window-option -g clock-mode-colour cyan
set-window-option -g clock-mode-style 12

# pane borders
set-option -g pane-border-fg white
set-option -g pane-active-border-fg magenta

# Set window notifications
setw -g monitor-activity on # changes tab color when activity seen
set -g visual-activity off  # don't send message when activity seen

# Note to self:
# to monitor for 30s of silence:
# setw monitor-activity off
# setw monitor-silence 30

# Open panes in #{pane_current_path}
unbind-key c
bind-key c new-window -c "#{pane_current_path}"

# splitting panes
unbind %
bind | split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"

# moving between panes
bind h   select-pane -L
bind C-h select-pane -L
bind j   select-pane -D
bind C-j select-pane -D
bind k   select-pane -U
bind C-k select-pane -U
bind l   select-pane -R
bind C-l select-pane -R

# Smart pane switching with awareness of vim splits
bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim(diff)?$' && tmux send-keys C-h) || tmux select-pane -L"
bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim(diff)?$' && tmux send-keys C-j) || tmux select-pane -D"
bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim(diff)?$' && tmux send-keys C-k) || tmux select-pane -U"
bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim(diff)?$' && tmux send-keys C-l) || tmux select-pane -R"
bind -n C-\ run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim(diff)?$' && tmux send-keys 'C-\\') || tmux select-pane -l"

# resizing panes
bind Down  resize-pane -D 10
bind Up    resize-pane -U 10
bind Left  resize-pane -L 10
bind Right resize-pane -R 10

# resource
bind r   source-file ~/.tmux.conf
bind C-r source-file ~/.tmux.conf

bind-key -t vi-copy 'v' begin-selection
#bind-key -t vi-copy 'y' copy-selection

unbind -t vi-copy Enter
if-shell 'uname | grep -q "Darwin"' 'bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"' 'bind-key -t vi-copy Enter copy-pipe "xclip -i"'
if-shell 'uname | grep -q "Darwin"' 'bind-key -t vi-copy "y"   copy-pipe "reattach-to-user-namespace pbcopy"' 'bind-key -t vi-copy Enter copy-pipe "xclip -i"'

# less lag when doing C-a <Esc>
set -s escape-time 20

# only shrink window to smallest if another session is looking at it
setw -g aggressive-resize on

# Assume we're using a term that handles 256 color..
set -g default-terminal "screen-256color"

set-option -g default-command "if which reattach-to-user-namespace >/dev/null 2>&1 ; then reattach-to-user-namespace -l /usr/local/bin/zsh ; else zsh ; fi"
