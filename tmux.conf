set-option -g prefix C-a
bind-key C-a last-window
bind-key a send-prefix

# vim
setw -g mode-keys vi

set-option -g -q mouse on

# Lots of history
set -g history-limit 10000

unbind K
bind K confirm-before "kill-window"

set-window-option -g automatic-rename on # auto name
set-window-option -g automatic-rename-format '#T'
set-window-option -g allow-rename off

bind-key p choose-buffer

set -g @optcolon ':'
set-option -g set-titles on
set-option -g set-titles-string 'tmux #S: #{pane_title}'

set-option -ga update-environment " DBUS_SESSION_BUS_ADDRESS XDG_SESSION_COOKIE SESSION_MANAGER GDMSESSION GNOME_KEYRING_CONTROL GNOME_KEYRING_PID GPGKEY UBUNTU_MENUPROXY XDG_CONFIG_DIRS XDG_CURRENT_DESKTOP XDG_DATA_DIRS XDG_SEAT_PATH XDG_SESSION_COOKIE XDG_SESSION_PATH DISPLAY"

# status bar
set-option -g status-justify centre
set-option -g status-style fg=cyan
set-option -g status-interval 2
set-option -g status-left-length 20
# cool: can use #T to show current directory
set-option -g status-left '#[fg=green][ ## ] ['
set-option -g status-right '#{prefix_highlight} #[fg=green]] [ #[fg=blue]%F #[fg=white]%I:%M%P #[fg=green]]#[default]'
set-window-option -g window-status-current-style fg=white
set-window-option -g window-status-format '#[fg=green][#[fg=default]#I:#W#F#[fg=green]]#[default]'
set-window-option -g window-status-current-format '#[fg=red](#[fg=white]#I:#W#F#[fg=red])#[default]'

if-shell 'test -n "$SSH_CONNECTION"' {
    set-option -g prefix2 C-b
    bind-key C-b last-window
    bind-key b send-prefix

    set-option -g set-titles-string 'tmux-ssh #S'
    set-option -g status-right '#{prefix_highlight} #[fg=green]] [ #[fg=blue]#S #[fg=green]]#[default]'
}


# clock
set-window-option -g clock-mode-colour cyan
set-window-option -g clock-mode-style 12

# pane borders
set-option -g pane-border-style fg=white
set-option -g pane-active-border-style fg=magenta

# Set window notifications
setw -g monitor-activity on # changes tab color when activity seen
set -g visual-activity off  # don't send message when activity seen

# Note to self:
# to monitor for 30s of silence:
# setw monitor-activity off
# setw monitor-silence 30

# Open panes in #{pane_current_path}
unbind-key c
bind-key c new-window -c "#{pane_current_path}"

# splitting panes
unbind %
bind | split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"

# moving between panes
bind h   select-pane -L
bind j   select-pane -D
bind k   select-pane -U
bind l   select-pane -R

# esc to copy, but send it to the nested instance if there is one
bind Escape if-shell 'echo "#{pane_title}" | grep -iqE "^tmux-ssh"' \
    "send-prefix; send-key Escape" \
    "copy-mode"

# Smart pane switching with awareness of vim splits
# TODO: when entering outer tmux we don't go to the pane on that edge, just whatever the last one was.. still better than before
contains_nested_or_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$" || echo "#{pane_title}" | grep -iqE "^(vim\[.*\]$|tmux-ssh)"'

#bind -n C-h if-shell "$contains_nested_or_vim" "send-keys C-h" "select-pane -L"
bind -n C-h if-shell "$contains_nested_or_vim" "send-keys C-h" {
    if-shell 'test "#{pane_at_left}" = 1 -a -n "$SSH_CONNECTION" -a -S /tmp/tmux-host-socket' \
        {run-shell 'tmux -S /tmp/tmux-host-socket select-pane -L'} \
        "select-pane -L"
}

#bind -n C-j if-shell "$contains_nested_or_vim" "send-keys C-j" "select-pane -D"
bind -n C-j if-shell "$contains_nested_or_vim" "send-keys C-j" {
    if-shell 'test "#{pane_at_bottom}" = 1 -a -n "$SSH_CONNECTION" -a -S /tmp/tmux-host-socket' \
        {run-shell 'tmux -S /tmp/tmux-host-socket select-pane -D'} \
        "select-pane -D"
}

#bind -n C-k if-shell "$contains_nested_or_vim" "send-keys C-k" "select-pane -U"
bind -n C-k if-shell "$contains_nested_or_vim" "send-keys C-k" {
    if-shell 'test "#{pane_at_top}" = 1 -a -n "$SSH_CONNECTION" -a -S /tmp/tmux-host-socket' \
        {run-shell 'tmux -S /tmp/tmux-host-socket select-pane -U'} \
        "select-pane -U"
}

#bind -n C-l if-shell "$contains_nested_or_vim" "send-keys C-l" "select-pane -R"
bind -n C-l if-shell "$contains_nested_or_vim" "send-keys C-l" {
    if-shell 'test "#{pane_at_right}" = 1 -a -n "$SSH_CONNECTION" -a -S /tmp/tmux-host-socket' \
        {run-shell 'tmux -S /tmp/tmux-host-socket select-pane -R'} \
        "select-pane -R"
}

# resizing panes
bind Down  resize-pane -D 10
bind Up    resize-pane -U 10
bind Left  resize-pane -L 10
bind Right resize-pane -R 10

# resource
bind r   source-file ~/.tmux.conf
bind C-r source-file ~/.tmux.conf

bind-key -Tcopy-mode-vi 'v' send -X begin-selection
bind-key -Tcopy-mode-vi 'y' send -X copy-selection-and-cancel
bind-key -Tcopy-mode-vi 'Y' send -X copy-selection-and-cancel \; paste-buffer

# use bracketed paste if supported
bind-key -Tprefix ] paste-buffer -p

# 3.2 adds Support for mintty's application escape sequence, so this is not necessary
# less lag when doing C-a <Esc>
set -s escape-time 0

# Send focus events to vim, etc.
set -g focus-events off

# required for kitty images
set -gq allow-passthrough on

# only shrink window to smallest if another session is looking at it
setw -g aggressive-resize on

# Enable host clipboard sync
set -g set-clipboard on

# Assume we're using a term that handles 256 color. Most systems know screen-256
set -g default-terminal "screen-256color"
# Most systems (incl macOS) know xterm
if-shell '>/dev/null 2>&1 infocmp xterm-256color' 'set -g default-terminal "xterm-256color"'
# macOS doesn't know tmux, but linux usually does
if-shell '>/dev/null 2>&1 infocmp tmux-256color' 'set -g default-terminal "tmux-256color"'

# wsltty reports as xterm and supports full 24bit colors, so add it here
set -ga terminal-overrides ",xterm-256color:Tc:smso=[3m"
# allow nested tmux to send OSC52 clipboard commands to partent tmux
#set -as terminal-features ',screen-256color:clipboard'
set -as terminal-overrides ',screen-256color:Ms=\E]52;%p1%s;%p2%s\007'
set -as terminal-overrides ',tmux-256color:Ms=\E]52;%p1%s;%p2%s\007'
set -as terminal-overrides ',xterm-256color:Ms=\E]52;%p1%s;%p2%s\007'

#set-option -g default-command "fish"
# set-option -g default-command "bash"

# Set the background of inactive windows to be slightly grey
#set-window-option -g window-style "bg=#181818"
#set-window-option -g window-active-style "bg=black"
#set-window-option -g pane-active-border-style ""

# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'

# Provides <pf-space>
set -g @plugin 'fcsonline/tmux-thumbs'
# add -w to copy to clipboard
set -g @thumbs-command 'tmux set-buffer -w {}'
set -g @thumbs-upcase-command 'tmux set-buffer -w {} && tmux paste-buffer'
# start from bottom
set -g @thumbs-reverse on
# re-use same hint for same string
set -g @thumbs-unique on

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
# Install new plugins with <prefix, S-I>
# Update plugins with <prefix, S-U>
# Uninstall removed plugins with <prefix, A-u>

if "test ! -d ~/.tmux/plugins/tpm" \
   "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm'"

if "test -d ~/.tmux/plugins/tpm" \
    "run '~/.tmux/plugins/tpm/tpm'"
