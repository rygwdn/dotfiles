#!/usr/bin/env python3
# encoding: utf-8

import sys
from subprocess import check_output, CalledProcessError
import re
import argparse

import argparse

parser = argparse.ArgumentParser(description='Get all git branches sorted by recency')
parser.add_argument('--git', dest='git', default='git',
                    help='The git executable to use')

args = parser.parse_args()

def git(command):
    return check_output(args.git + ' ' + command, shell=True).decode("utf-8").splitlines()

reflog_match = re.compile(r".*moving from (.*) to (.*)")

reflog = git('log --walk-reflogs --grep-reflog="moving from" --all --pretty=format:"%gs" --since="@{1 month ago}"')

recent = []
for line in reflog:
    match = reflog_match.match(line)
    if match:
        recent.append(match.group(1).strip())
        recent.append(match.group(2).strip())

all_heads = git("for-each-ref refs/heads --format='%(refname)'")

try:
    current_branch = git("symbolic-ref HEAD 2>/dev/null")[0].strip()
except CalledProcessError:
    current_branch = ""

branches = []
for head in all_heads:
    if head == current_branch:
        continue
    branches.append(head[len("refs/heads/"):])

missing_branches = [b for b in branches if b not in recent]

seen = set()
sorted_recent = []
for branch in recent + missing_branches:
    if branch in seen:
        continue
    seen.add(branch)
    if branch not in branches:
        continue
    sorted_recent.append(branch)

print("\n".join(sorted_recent))
