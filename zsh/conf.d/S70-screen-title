#!/usr/bin/env zsh

# Disable Oh-My-ZSH title setting
export DISABLE_AUTO_TITLE=true

# Decide whether to set a screen title
function title() {
    TITLE=$1

    [ -n "$SSH_TTY" ] && TITLE+="@${ZHOST}"

    if [[ $TERM =~ "screen" ]]
    then
        print -Pn "\ek${TITLE}\e\\"

    elif [[ $TERM =~ "xterm" || $TERM =~ "rxvt" ]]
    then
        # Use this one instead for XTerms:
        print -nR $'\033]0;'$PRE$*$'\a'
    fi
}

function zsh-title() {
    emulate -L zsh
    local -a cmd
    cmd=(${(z)1})

    # Construct a command that will output the desired job number.
    case $cmd[1] in
        "fg")
            if (( $#cmd == 1 )); then
                # No arguments, must find the current job
                cmd=(builtin jobs -l %+)
            else
                # Replace the command name, ignore extra args.
                cmd=(builtin jobs -l ${(Q)cmd[2]})
            fi
            ;;
        %*)
            cmd=(builtin jobs -l ${(Q)cmd[1]})
            ;; # Same as "else" above
        "exec")
            shift cmd;& # If the command is 'exec', drop that, because
            # we'd rather just see the command that is being
            # exec'd. Note the ;& to fall through.

        "")
            title "zsh"           # Not resuming a job
            return
            ;;                     # so we're all done

        *)
            title $cmd[1]:t # Not resuming a job
            return
            ;;                     # so we're all done
    esac

    local -A jt
    jt=(${(kv)jobtexts})       # Copy jobtexts for subshell

    # Run the command, read its output, and look up the jobtext.
    # Could parse $rest here, but $jobtexts (via $jt) is easier.
    $cmd >>(
        read num rest
        cmd=(${(z)${(e):-\$jt$num}})
        title $cmd[1]:t
        ) 2>/dev/null
}

precmd_functions+='zsh-title'
preexec_functions+='zsh-title'
