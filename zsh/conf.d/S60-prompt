#!/usr/bin/env zsh

setopt prompt_subst

autoload regexp-replace

[[ "${KERNEL_RELEASE}" =~ "([Mm]icrosoft|[Ww]indows)" ]] && export SIMPLE_VCS=true
[[ "${SIMPLE_VCS}" == "" ]] && export SIMPLE_VCS=false

# Don't use transient on broken PTY implementations..
${SIMPLE_VCS} || setopt TRANSIENT_RPROMPT

# get host and set color
case "$ZHOST" in
    razz|work )
        Color=$PR_LIGHT_CYAN
        ;;
    jazz )
        Color=$PR_GREEN
        ;;
    acadia|cherokee|linode )
        Color=$PR_LIGHT_YELLOW
        ;;
    * )
        # red for unknown host
        Color=$PR_LIGHT_RED
        ;;
esac

[[ "${USER}" == "root" || "${USERNAME}" == "root" ]] && Color=$PR_RED  # red text for root
[ -n "$SSH_TTY" ] && psprepend="${PR_RED}ssh-${PR_NO_COLOR}"

# tries to keep the directory name short in the prompt
export LAST_FULL_PWD=
export SHORT_PWD=

function update_short_pwd() {
    [[ "$PWD" == "${LAST_FULL_PWD}" ]] && return
    export LAST_FULL_PWD=$PWD

    CurDir=$(print -P '%~')

    if [[ "${#CurDir}" -gt 20 ]]
    then
        export SHORT_PWD="$(echo "$CurDir" | sed -e "s!\([^/]\{1,2\}\)[^/]*/!\1/!g")"
    else
        export SHORT_PWD="$CurDir"
    fi
}

precmd_functions+='update_short_pwd'

export HAS_GIT=$(which git &> /dev/null && echo true || echo false)
export LASTPWD=
export GITDIR=
export VCS_PROMPT=

function git_ps1() {
    if $HAS_GIT; then
        if [[ "$PWD" != "$LASTPWD" ]]; then
            export LASTPWD=$PWD
            export GITDIR="$(git rev-parse --git-dir 2>/dev/null)"
        fi
        local g=$GITDIR
        if [[ -n "$g" ]]; then
            local r
            local b
            if [ -d "$g/rebase-apply" ]; then
                if test -f "$g/rebase-apply/rebasing"; then
                    r="|rebase"
                elif test -f "$g/rebase-apply/applying"; then
                    r="|am"
                else
                    r="|am/rebase"
                fi
                b="$(git symbolic-ref HEAD 2>/dev/null)"
            elif [ -f "$g/rebase-merge/interactive" ]; then
                r="|rebase-i"
                b="$(cat "$g/rebase-merge/head-name")"
            elif [ -d "$g/rebase-merge" ]; then
                r="|rebase-m"
                b="$(cat "$g/rebase-merge/head-name")"
            elif [ -f "$g/MERGE_HEAD" ]; then
                r="|merging"
                b="$(git symbolic-ref HEAD 2>/dev/null)"
            else
                if [ -f "$g/BISECT_LOG" ]; then
                    r="|bisecting"
                fi
                b="$(cut -f2 -d" " "$g/HEAD")"
                if [[ "${b##refs/heads/}" == "${b}" ]]; then
                    if ! b="$(git symbolic-ref HEAD 2>/dev/null)"; then
                        if ! b="$(git describe --exact-match HEAD 2>/dev/null)"; then
                            b="$(cut -c1-7 "$g/HEAD")..."
                        fi
                    fi
                fi
            fi
            export VCS_PROMPT=`printf "%s" "${PR_BLUE}[${PR_GREEN}${b##refs/heads/}$r${PR_BLUE}]${PR_NO_COLOR}"`
        else
            export VCS_PROMPT=
        fi
    else
        export VCS_PROMPT=
    fi
}

function proj_prompt() {
    [[ -n "$PROJECT" ]] && echo -n " ${PR_RED}(${PR_BLUE}${PROJECT}${PR_RED})"
}

export VIRTUAL_ENV_DISABLE_PROMPT=true
function env_prompt() {
    [[ -n "${VIRTUAL_ENV}" ]] && echo -n " ${PR_GREEN}(`basename "$VIRTUAL_ENV"`)"
}

function vcs_prompt() {
    [[ -n "${vcs_info_msg_0_}" ]] && echo -n " ${vcs_info_msg_0_}"
    [[ -n "${VCS_PROMPT}" ]] && echo -n " ${VCS_PROMPT} "
}

function vi_mode_color() {
    echo "${${KEYMAP/vicmd/$PR_BLUE}/(main|viins)/$PR_GREEN}"
}

function update_tmux_environment() {
    eval $(tmux switch-client \; show-environment -s)
}


if $SIMPLE_VCS
then
    precmd_functions+='git_ps1'
    export PS1="${psprepend}${Color}$ZHOST:${PR_NO_COLOR}\${SHORT_PWD}\$(env_prompt)\$(vcs_prompt)${PR_GREEN}\$${PR_NO_COLOR} "
else
    precmd_functions+='vcs_info'
    export PS1="${psprepend}${Color}$ZHOST:${PR_NO_COLOR}\${SHORT_PWD}\$(vi_mode_color)\$${PR_NO_COLOR} "
    export RPROMPT="\$(proj_prompt)\$(env_prompt)\$(vcs_prompt)${PR_NO_COLOR}"

    if [[ -n $TMUX ]] || [[ -n $TMUX_PANE ]]
    then
        precmd_functions+='update_tmux_environment'
    fi

    # Ensures that $terminfo values are valid and updates editor information when
    # the keymap changes.
    function zle-keymap-select zle-line-init zle-line-finish {
        # The terminal must be in application mode when ZLE is active for $terminfo
        # values to be valid.
        if (( ${+terminfo[smkx]} )); then
            printf '%s' ${terminfo[smkx]}
        fi
        if (( ${+terminfo[rmkx]} )); then
            printf '%s' ${terminfo[rmkx]}
        fi

        zle reset-prompt
        zle -R
    }

    zle -N zle-line-init
    zle -N zle-line-finish
    zle -N zle-keymap-select
fi
