#!/bin/bash

# Set up ls
if [[ "$TERM" != "dumb" ]]; then
    colorsFile="$HOME/.zsh/dircolors.local.zsh"
    hasColorsFile=$([[ -f "${colorsFile}" ]] && echo true || echo false)
    if [[ "$TERM" == "cygwin" || "$CYGWIN" == "true" || -n "$MSYSTEM" ]]
    then
        alias ls='ls --color'
        export LS_COLORS=
    elif $hasColorsFile || which dircolors &> /dev/null
    then
        $hasColorsFile || "$(dircolors -b)" > "$colorsFile"
        source "$colorsFile"
        alias ls='ls --color=auto'
    elif echo "${KERNEL_NAME}" | grep -iq "Darwin"
    then
        alias ls='ls -G'
    fi
fi

alias rs="rsync -a --progress --stats"

alias cherokee="ssh linode -L 9090:localhost:9090 -t -C 'sudo killall cherokee-admin; sudo cherokee-admin -b'"
alias psa='ps aux | grep -v grep | grep -e "^USER" -e '


alias ll='ls -l'
alias la='ls -A'
alias l='ls -CF'
alias pp='popd'
alias pd='pushd'
alias ap='sudo aptitude'


alias ipy=ipython
alias nb="jupyter notebook"

function gv {
    if $RUNNING_IN_WINDOWS; then
        ( /dev/null gvim --fork=1 ) &>/dev/null
    else
        ( gvim -f "$@" & ) &>/tmp/vim_out
    fi
}

function _git_mod_files {
    local _path=$(git rev-parse --show-toplevel || pwd)
    local _files=
    # changed files
    #echo "1: $1"
    [[ -z "$1" ]] && _files="$(cd $_path ; git status --porcelain | sed 's/^ *[^ ]* *//' | sort -u)"
    #echo "f1: $_files"
    # files changed in HEAD
    [[ -z $_files ]] && _files="$(cd $_path; git diff-tree --no-commit-id --name-only -r ${1:-HEAD})"
    #echo "f2: $_files"
    _files=$(echo "$_files" | sed "s!^!$_path/!" | grep -v '/images/' | while read line ; do file "$line" | grep -q '\btext\b' && echo $line ; done)
    #echo "f3: $_files"
    echo "$_files"
}

function gmod {
    g $(_git_mod_files "$@" | xargs echo)
}
function vmod {
    vim $(_git_mod_files "$@" | xargs echo)
}

alias gses="g --servername"
alias gn="gses"
alias gchanged="gmod"

function vcs()
{
    prog=`(
    while [ "$(pwd)" != "$HOME" ] && [ "$(pwd)" != '/' ]
    do
        [ -e .git ] && echo 'git' && break
        [ -e .bzr ] && echo 'bzr' && break
        [ -e .hg ] && echo 'hg' && break
        cd ..
    done
    )`
    if [[ -n $prog ]]; then
        $prog "$@"
    else
        svn "$@"
    fi
}

alias ci="git commit"
alias cie="gite commit"
alias co="git checkout"
alias coe="gite checkout"
alias gd="git diff"
alias gde="gite diff"
alias gdc="git diff --cached"
alias gdce="gite diff --cached"
alias gmt="git mergetool"
alias br="git branch"
alias bre="gite branch"
alias show="git show"
alias showe="gite show"
alias rb="git rebase"
alias rbc="git rebase --continue"
alias rbe="gite rebase"
alias rbi="git rbi"
alias rbie="gite rbi"
# 

type compdef &>/dev/null && compdef gite=git

function gfu {
    upstream=$(gite config --list | grep -q '^remote\.origin\.' && echo 'origin' || echo 'upstream')
    [[ "$(gite config credential.helper)" == "lastpass" ]] && lpass sync
    gite fetch --prune --tags ${upstream} "$@"
}

alias po='gite push origin'
alias pof='po --force-with-lease'
alias gph='po --set-upstream HEAD'

alias stf='git st | fpp'

alias gl='lg -n-1 --all'
alias gk='gitk --all'
alias wip='git wip'
alias unwip='git unwip'

function st {
  summary=$(git log -1 --pretty=%s)
  echo "${summary}" | grep -q '^WIP: ' && echo "On a WIP commit: ${summary}"
  git st
}


# fh - repeat history
fh() {
  print -z $( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed 's/ *[0-9]* *//')
}

which hub &>/dev/null && alias git=hub

# annoyances
alias c='cd'
alias d='cd'
alias dpgk='dpkg'


alias ..='cd ..'
alias ...='cd ../..'


complete -F _aptitude -o default ap

alias e='ember'
alias vssh='vagrant ssh'

if hash docker-compose &>/dev/null; then
  alias dc='docker-compose'
elif hash docker-compose.exe &>/dev/null; then
  alias dc='docker-compose.exe'
fi

alias gu='gitup commit'
alias rg='rg -S'
alias ag='hash rg &>/dev/null && echo "Please consider using rg.." 1>&2; ag'

alias prr="pr release"

alias prl='pr -l'

function ds {
    [[ -z "$@" ]] && 1='.*'
    services="$(
        docker inspect \
            -f '{{.Id}} {{range $k, $v := .Config.Labels}}{{ if eq $k "com.docker.compose.service"}}{{$v}}{{end}}{{end}}' \
            $(docker-compose ps -q)
        )"
    container=$(echo "$services" | grep -m1 " $1$" | awk '{ print $1 }')
    if [[ -z $container ]]; then
        echo "Unable to find container, possible options:"
        echo "$services" | awk '{print $2}'
        return 1
    fi
    shift
    [[ -z "$@" ]] && 1=bash
    docker exec $([[ -t 0 ]] && echo "-it") $container env TERM=$TERM LANG=$LANG "$@"
}

function h() {
    hist=$([ -n "$ZSH_NAME" ] && echo "fc -l 1" || echo "history")
    echo "$1"
    if [[ -z "$1" ]]
    then
        cmd=$(eval $hist | fzf +s --tac)
        if [ -n "$ZSH_NAME" ]; then
            print -z $(echo "$cmd" | sed 's/^ *[0-9][0-9]* *//')
        else
            echo "$cmd"
        fi
    else
        eval $hist | grep "$@"
    fi
}

function dsysdig {
    docker run -it --rm --privileged \
        -v /var/run/docker.sock:/host/var/run/docker.sock \
        -v /dev:/host/dev \
        -v /proc:/host/proc:ro \
        -v /boot:/host/boot:ro \
        -v /lib/modules:/host/lib/modules:ro \
        -v /usr:/host/usr:ro sysdig/sysdig csysdig -pc "$@"
}

function skim {
    open -a Skim "$@"
}

function tname {
    # "tname <some name>" sets the tmux pane title and disallows zsh/vim/etc from changing it
    # "tname" re-allows the renaming of the window
    if [[ -n $1 ]]; then
        tmux rename-window "$*"
        tmux set-window-option allow-rename off
    else
        tmux rename-window zsh
        tmux set-window-option allow-rename on
    fi
}

[ -e ~/.bash_aliases_local ] && . ~/.bash_aliases_local
