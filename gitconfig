[color]
	diff = auto
	status = auto
	branch = auto
	ui = auto
[core]
	editor = vim
	excludesfile = ~/.gitignore
	pager = less -F -X -R
[commit]
	verbose = true
[alias]
	st = status
	ci = commit
	br = branch
	co = checkout
	ae = commit --amend --no-edit
	rbi = rebase -i --autosquash --autostash

	vimdiff = difftool -t vimdiff
	vmerge = mergetool --tool=vimdiff
	gmerge = mergetool --tool=gvimdiff

	# https://stackoverflow.com/questions/8475448/find-merge-commit-which-include-a-specific-commit
	# git find-merge <SHA-1> [HEAD]
	find-merge = "!sh -c 'commit=$0 && branch=${1:-HEAD} && (git rev-list $commit..$branch --ancestry-path | cat -n; git rev-list $commit..$branch --first-parent | cat -n) | sort -k2 -s | uniq -f1 -d | sort -n | tail -1 | cut -f2'"
	find-merges = "!sh -c 'commit=$0 && branch=${1:-HEAD} && (git rev-list $commit..$branch --ancestry-path | cat -n; git rev-list $commit..$branch --first-parent | cat -n) | sort -k2 -s | uniq -f1 -d | sort -n | cut -f2'"
	show-merge = "!sh -c 'merge=$(git find-merge $0 $1) && [ -n \"$merge\" ] && git show $merge'"

	wip="!wip() { br=\"$(git rev-parse --abbrev-ref HEAD)\" && sha=\"$(git rev-parse --short HEAD)\" && name=${br:-${sha}} && git add . && git commit -m\"WIP: ${name}\"; } ; wip"
	unwip="!unwip() { if ! git log -1 --pretty=%s | grep -q '^WIP: '; then echo previous commit was not a WIP: 1>&2; git log -1 --oneline 1>&2; exit 1; else git reset --soft HEAD~1; git reset HEAD -- .; git status; fi; } ; unwip"

	identity = "! git config user.email \"$(git config user.$1.email)\"; git config user.name \"$(git config user.$1.name || git config user.name)\"; :"
	ident-personal = identity personal
	ident-work = identity work
[url "git@github.com:rygwdn/"]
	insteadOf = github:
[rerere]
	enabled = 1
[branch]
	autosetupmerge = true
[diff]
	renames = copies
	mnemonicprefix = true
	compactionHeuristic = true
[difftool]
	prompt = false
	keepTemporaries = false
	keepBackup = false
[mergetool]
	prompt = false
	keepTemporaries = false
	keepBackup = false
[mergetool "code"]
	cmd = code --wait --merge $REMOTE $LOCAL $BASE $MERGED
[merge]
	tool = code
	ff = only
[push]
	default = current
[fetch]
	prune = true
[tag]
	sort = version:refname
[pull]
	ff = only
[rebase]
	autoStash = true
[user]
	useConfigOnly = true
	name = Ryan Wooden
[user "work"]
	email = ryan.wooden@shopify.com
[user "personal"]
	email = rygwdn@gmail.com
