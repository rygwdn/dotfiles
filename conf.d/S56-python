#!/usr/bin/env zsh

export WORKON_HOME=$HOME/.virtualenvs
local ve
ve=/usr/local/bin/virtualenvwrapper_bashrc
[ -e $ve ] && source $ve
ve=/usr/local/bin/virtualenvwrapper.sh
[ -e $ve ] && source $ve

export PIP_VIRTUALENV_BASE=$WORKON_HOME
export PIP_RESPECT_VIRTUALENV=true


# Automatically activate Git projects' virtual environments based on the
# directory name of the project. Virtual environment name can be overridden
# by placing a .venv file in the project root with a virtualenv name in it
function workon_cwd {
    ENV_NAME=$(
        chpwd_functions=
        while [[ `pwd` != "/" ]]; do
            [ -e .venv ] && cat .venv && break
            cd ..
        done
    ) 
    echo "env: $ENV_NAME"
    if [[ -n $ENV_NAME ]] && [[ $ENV_NAME != "$CD_VIRTUAL_ENV" ]] && [[ "$VIRTUAL_ENV" != $WORKON_HOME/$ENV_NAME ]]
    then
        echo "here"
        if [ -e "$WORKON_HOME/$ENV_NAME/bin/activate" ]; then
            echo "here2"
            workon "$ENV_NAME" && export CD_VIRTUAL_ENV="$ENV_NAME"
        fi
    elif [ $CD_VIRTUAL_ENV ]; then
        # We've just left the repo, deactivate the environment
        # Note: this only happens if the virtualenv was activated automatically
        deactivate && unset CD_VIRTUAL_ENV
    fi
}

chpwd_functions+='workon_cwd'
